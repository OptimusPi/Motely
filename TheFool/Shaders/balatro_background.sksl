uniform float iTime;
uniform float2 iResolution;
uniform float spin_rotation_speed;
uniform float move_speed;
uniform float2 offset;
uniform float4 colour_1;
uniform float4 colour_2;
uniform float4 colour_3;
uniform float contrast;
uniform float lighting;
uniform float spin_amount;
uniform float pixel_filter;

float4 main(float2 fragCoord) {
    // Pixelation effect
    float pixel_size = length(iResolution) / pixel_filter;
    float2 screen_coords = fragCoord;
    
    // Flip Y coordinate for AvaloniaUI coordinate system
    screen_coords.y = iResolution.y - screen_coords.y;
    
    float2 uv = (floor(screen_coords * (1.0 / pixel_size)) * pixel_size - 0.5 * iResolution) / length(iResolution) - offset;
    
    // Polar coordinate swirl
    float uv_len = length(uv);
    float speed = (spin_rotation_speed * 0.2) + 302.2;
    float angle = atan(uv.y, uv.x);
    float new_angle = angle + speed - 20.0 * (spin_amount * uv_len + (1.0 - spin_amount));
    
    uv = float2(cos(new_angle), sin(new_angle)) * uv_len;
    
    // Paint distortion loop
    uv *= 30.0;
    speed = iTime * move_speed;
    float2 uv2 = float2(uv.x + uv.y);
    
    for (int i = 0; i < 5; i++) {
        uv2 += sin(max(uv.x, uv.y)) + uv;
        uv += 0.5 * float2(cos(5.1123314 + 0.353 * uv2.y + speed * 0.131121), 
                          sin(uv2.x - 0.113 * speed));
        uv -= 1.0 * cos(uv.x + uv.y) - 1.0 * sin(uv.x * 0.711 - uv.y);
    }
    
    // Color mixing
    float contrast_mod = (0.25 * contrast + 0.5 * spin_amount + 1.2);
    float paint_res = min(2.0, max(0.0, length(uv) * 0.035 * contrast_mod));
    float c1p = max(0.0, 1.0 - contrast_mod * abs(1.0 - paint_res));
    float c2p = max(0.0, 1.0 - contrast_mod * abs(paint_res));
    float c3p = 1.0 - min(1.0, c1p + c2p);
    
    // Lighting
    float light = (lighting - 0.2) * max(c1p * 5.0 - 4.0, 0.0) + 
                  lighting * max(c2p * 5.0 - 4.0, 0.0);
    
    // Final color composition
    float3 color = colour_1.rgb * c1p + colour_2.rgb * c2p + colour_3.rgb * c3p + float3(light);
    
    // Ensure full opacity
    return float4(color, 1.0);
}

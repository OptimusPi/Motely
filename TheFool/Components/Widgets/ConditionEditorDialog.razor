@using MudBlazor
@using MudBlazor.Services
@using TheFool.Models

<MudDialog>
    <DialogContent>
        <MudGrid>
            <MudItem xs="12">
                <MudSelect @bind-Value="ConditionType" 
                          Label="Type" 
                          Variant="Variant.Outlined"
                          Class="mb-3">
                    <MudSelectItem Value="@("Joker")">Joker</MudSelectItem>
                    <MudSelectItem Value="@("Tarot")">Tarot</MudSelectItem>
                    <MudSelectItem Value="@("Spectral")">Spectral</MudSelectItem>
                    <MudSelectItem Value="@("Voucher")">Voucher</MudSelectItem>
                    <MudSelectItem Value="@("PlayingCard")">Playing Card</MudSelectItem>
                    <MudSelectItem Value="@("Boss")">Boss</MudSelectItem>
                    <MudSelectItem Value="@("SmallBlindTag")">Small Blind Tag</MudSelectItem>
                    <MudSelectItem Value="@("BigBlindTag")">Big Blind Tag</MudSelectItem>
                    <MudSelectItem Value="@("SoulJoker")">Soul Joker</MudSelectItem>
                </MudSelect>
            </MudItem>
            
            @* Dynamic fields based on type *@
            @switch (ConditionType)
            {
                case "PlayingCard":
                    <MudItem xs="6">
                        <MudSelect @bind-Value="Rank" Label="Rank" Variant="Variant.Outlined">
                            @foreach (var rank in new[] { "Ace", "Two", "Three", "Four", "Five", "Six", "Seven", "Eight", "Nine", "Ten", "Jack", "Queen", "King" })
                            {
                                <MudSelectItem Value="@rank">@rank</MudSelectItem>
                            }
                        </MudSelect>
                    </MudItem>
                    <MudItem xs="6">
                        <MudSelect @bind-Value="Suit" Label="Suit" Variant="Variant.Outlined">
                            @foreach (var suit in new[] { "Heart", "Diamond", "Club", "Spade" })
                            {
                                <MudSelectItem Value="@suit">@suit</MudSelectItem>
                            }
                        </MudSelect>
                    </MudItem>
                    break;
                    
                default:
                    <MudItem xs="12">
                        <MudTextField @bind-Value="Value" 
                                     Label="Value/Name" 
                                     Variant="Variant.Outlined"
                                     Class="mb-3" />
                    </MudItem>
                    break;
            }
            
            @if (ShowEditionField())
            {
                <MudItem xs="12">
                    <MudSelect @bind-Value="Edition" Label="Edition" Variant="Variant.Outlined" Class="mb-3">
                        <MudSelectItem Value="@("None")">None</MudSelectItem>
                        <MudSelectItem Value="@("Foil")">Foil</MudSelectItem>
                        <MudSelectItem Value="@("Holographic")">Holographic</MudSelectItem>
                        <MudSelectItem Value="@("Polychrome")">Polychrome</MudSelectItem>
                        <MudSelectItem Value="@("Negative")">Negative</MudSelectItem>
                    </MudSelect>
                </MudItem>
            }
            
            <MudItem xs="12">
                <MudText Typo="Typo.subtitle2" Class="mb-2">Search Antes</MudText>
                <MudChipSet T="int" SelectedValues="selectedAntes" SelectedValuesChanged="@OnSelectedAntesChangedWrapper" MultiSelection="true" Filterable="true">
                    @for (int i = 1; i <= 8; i++)
                    {
                        var ante = i;
                        <MudChip T="int" Text="@($"Ante {ante}")" Value="@ante" Color="Color.Primary" />
                    }
                </MudChipSet>
            </MudItem>
        </MudGrid>
    </DialogContent>
    
    <DialogActions>
        <MudButton OnClick="Cancel">Cancel</MudButton>
        <MudButton Color="Color.Primary" 
                  Variant="Variant.Filled" 
                  OnClick="Submit"
                  Disabled="@(!IsValid())">
            @(ExistingCondition == null ? "Add" : "Update")
        </MudButton>
    </DialogActions>
</MudDialog>

@code {
    [CascadingParameter] IDialogReference MudDialog { get; set; } = null!;
     [Parameter] public bool IsNeed { get; set; }
    [Parameter] public FilterCondition ExistingCondition { get; set; }

    private string ConditionType = "Joker";
    private string Value = "";
    private string Edition = "None";
    private string Rank = "Ace";
    private string Suit = "Heart";
    private HashSet<int> selectedAntes = new();

    protected override void OnInitialized()
    {
        if (ExistingCondition != null)
        {
            ConditionType = ExistingCondition.Type;
            Value = ExistingCondition.Value ?? "";
            Edition = ExistingCondition.Edition ?? "None";
            Rank = ExistingCondition.Rank ?? "Ace";
            Suit = ExistingCondition.Suit ?? "Heart";
            selectedAntes = ExistingCondition.SearchAntes?.ToHashSet() ?? new HashSet<int>();
        }
        else
        {
            selectedAntes = new HashSet<int> { 1, 2, 3, 4, 5, 6, 7, 8 };
        }
    }

    private bool ShowEditionField() => 
        ConditionType is "Joker" or "PlayingCard" or "SoulJoker";

    private bool IsValid()
    {
        if (selectedAntes.Count == 0) return false;
        
        return ConditionType switch
        {
            "PlayingCard" => !string.IsNullOrEmpty(Rank) && !string.IsNullOrEmpty(Suit),
            _ => !string.IsNullOrEmpty(Value)
        };
    }

    private void Submit()
    {
        var searchAntes = selectedAntes
            .OrderBy(a => a)
            .ToArray();

        var condition = new FilterCondition
        {
            Type = ConditionType,
            Value = ConditionType == "PlayingCard" ? $"{Rank} of {Suit}" : Value,
            SearchAntes = searchAntes,
            Edition = ShowEditionField() ? Edition : null,
            Rank = ConditionType == "PlayingCard" ? Rank : null,
            Suit = ConditionType == "PlayingCard" ? Suit : null
        };

        MudDialog.Close(DialogResult.Ok(condition));
    }

    private void Cancel() => MudDialog.Close();

    private void OnSelectedAntesChanged(HashSet<int> values)
    {
        selectedAntes = values;
    }

    private void OnSelectedAntesChangedWrapper(object values)
    {
        if (values is HashSet<int> hashSet)
        {
            OnSelectedAntesChanged(hashSet);
        }
    }
}
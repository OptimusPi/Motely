@using TheFool.Models
@using TheFool.Services
@using System.Text.Json
@inject IDuckDbService DuckDbService
@inject IJSRuntime JS
@inject ISnackbar Snackbar

<MudPaper Class="pa-4" Elevation="2">
    <MudGrid AlignItems="Center" Class="mb-3">
        <MudItem xs="12" sm="6">
            <MudText Typo="Typo.h6">
                <MudIcon Icon="@Icons.Material.Filled.Search" Class="mr-2" />
                Search Results
                @if (IsLoading)
                {
                    <MudProgressCircular Size="Size.Small" Indeterminate="true" Class="ml-2" />
                }
            </MudText>
            @if (DatabaseStats != null && DatabaseStats.TotalResults > 0)
            {
                <MudText Typo="Typo.caption" Color="Color.Tertiary">
                    @DatabaseStats.TotalResults total results | 
                    Best score: @DatabaseStats.BestScore | 
                    Last updated: @DatabaseStats.LastResult?.ToString("g")
                </MudText>
            }
        </MudItem>
        <MudItem xs="12" sm="6">
            <MudStack Row="true" Justify="Justify.FlexEnd" Spacing="2">
                <MudTextField @bind-Value="SearchFilter" 
                             Placeholder="Filter seeds..." 
                             Variant="Variant.Outlined"
                             Immediate="true"
                             Adornment="Adornment.Start"
                             AdornmentIcon="@Icons.Material.Filled.FilterList"
                             Class="mt-0"
                             Style="width: 200px" />
                
                <MudButton Variant="Variant.Outlined" 
                          Color="Color.Primary"
                          StartIcon="@Icons.Material.Filled.Refresh"
                          OnClick="RefreshItems"
                          Disabled="@IsLoading">
                    Refresh
                </MudButton>
                
                <MudButton Variant="Variant.Outlined" 
                          Color="Color.Secondary"
                          StartIcon="@Icons.Material.Filled.Download"
                          OnClick="ExportResults"
                          Disabled="@(!Results.Any())">
                    Export CSV
                </MudButton>
            </MudStack>
        </MudItem>
    </MudGrid>

    @if (!DatabaseExists)
    {
        <MudAlert Severity="Severity.Info" Class="mb-3">
            <MudText>
                No results database found for <strong>@ConfigName</strong>
            </MudText>
            <MudText Typo="Typo.caption">
                Looking for: @GetExpectedDatabasePath()
            </MudText>
        </MudAlert>
    }
    else if (!Results.Any() && !IsLoading)
    {
        <MudAlert Severity="Severity.Warning" Class="mb-3">
            No results found in the database. Try running a search first!
        </MudAlert>
    }
    else
    {
        <MudDataGrid Items="@FilteredResults" 
                     SortMode="SortMode.Multiple" 
                     Filterable="false"
                     Dense="true"
                     Hover="true"
                     RowsPerPage="25"
                     Class="results-grid">
            <Columns>
                <PropertyColumn Property="x => x.Seed" 
                               Title="Seed"
                               Sortable="true">
                    <CellTemplate>
                        <MudTooltip Text="Click to copy">
                            <MudChip Size="Size.Small" 
                                    OnClick="@(() => CopySeed(context.Item.Seed))"
                                    Style="cursor: pointer;">
                                @context.Item.Seed
                            </MudChip>
                        </MudTooltip>
                    </CellTemplate>
                </PropertyColumn>
                
                <PropertyColumn Property="x => x.Score" 
                               Title="Score"
                               Sortable="true">
                    <CellTemplate>
                        <MudChip Size="Size.Small" 
                                Color="@GetScoreColor(context.Item.Score)"
                                Variant="Variant.Filled">
                            @context.Item.Score
                        </MudChip>
                    </CellTemplate>
                </PropertyColumn>
                
                <PropertyColumn Property="x => x.NaturalNegativeJokers" 
                               Title="Natural Negatives"
                               Sortable="true" />
                
                <PropertyColumn Property="x => x.DesiredNegativeJokers" 
                               Title="Desired Negatives"
                               Sortable="true" />
                
                <PropertyColumn Property="x => x.TimeAgo" 
                               Title="Found"
                               Sortable="false" />
                
                <TemplateColumn Title="Actions" Sortable="false">
                    <CellTemplate>
                        <MudIconButton Icon="@Icons.Material.Filled.ContentCopy" 
                                      Size="Size.Small"
                                      OnClick="@(() => CopyResultDetails(context.Item))" />
                    </CellTemplate>
                </TemplateColumn>
            </Columns>
            
            <PagerContent>
                <MudDataGridPager T="SearchResult" />
            </PagerContent>
        </MudDataGrid>
    }
</MudPaper>

<style>
    .results-grid {
        max-height: 600px;
    }
    
    .high-score {
        background-color: var(--mud-palette-success) !important;
    }
    
    .medium-score {
        background-color: var(--mud-palette-warning) !important;
    }
    
    .low-score {
        background-color: var(--mud-palette-info) !important;
    }
</style>

@code {
    [Parameter] public string ConfigName { get; set; } = "";
    [Parameter] public EventCallback OnResultsLoaded { get; set; }

    private List<SearchResult> Results = new();
    private DatabaseStats? DatabaseStats;
    private bool IsLoading = false;
    private bool DatabaseExists = false;
    private string SearchFilter = "";

    private IEnumerable<SearchResult> FilteredResults => 
        string.IsNullOrWhiteSpace(SearchFilter) 
            ? Results 
            : Results.Where(r => r.Seed.Contains(SearchFilter, StringComparison.OrdinalIgnoreCase));

    protected override async Task OnParametersSetAsync()
    {
        if (!string.IsNullOrEmpty(ConfigName))
        {
            await RefreshItems();
        }
    }

    public async Task RefreshItems()
    {
        if (string.IsNullOrEmpty(ConfigName))
            return;

        IsLoading = true;
        StateHasChanged();

        try
        {
            // Check if database exists
            DatabaseExists = await DuckDbService.DatabaseExistsAsync(ConfigName);
            
            if (DatabaseExists)
            {
                // Load results
                Results = await DuckDbService.GetResultsAsync(ConfigName);
                
                // Get stats
                DatabaseStats = await DuckDbService.GetDatabaseStatsAsync(ConfigName);
                
                await OnResultsLoaded.InvokeAsync();
                
                var message = Results.Any() 
                    ? $"Loaded {Results.Count} results from {ConfigName}.duckdb"
                    : "Database is empty";
                    
                Snackbar.Add(message, Results.Any() ? Severity.Success : Severity.Warning);
            }
            else
            {
                Results.Clear();
                DatabaseStats = null;
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error loading database: {ex.Message}", Severity.Error);
            Results.Clear();
        }
        finally
        {
            IsLoading = false;
            StateHasChanged();
        }
    }

    private async Task CopySeed(string seed)
    {
        await JS.InvokeVoidAsync("navigator.clipboard.writeText", seed);
        Snackbar.Add($"Copied: {seed}", Severity.Info);
    }

    private async Task CopyResultDetails(SearchResult result)
    {
        var details = $"Seed: {result.Seed}\n" +
                     $"Score: {result.Score}\n" +
                     $"Natural Negatives: {result.NaturalNegativeJokers}\n" +
                     $"Desired Negatives: {result.DesiredNegativeJokers}\n" +
                     $"Found: {result.FoundAt:yyyy-MM-dd HH:mm:ss}";
                     
        await JS.InvokeVoidAsync("navigator.clipboard.writeText", details);
        Snackbar.Add("Result details copied!", Severity.Info);
    }

    private async Task ExportResults()
    {
        try
        {
            var csv = "Seed,Score,Natural Negatives,Desired Negatives,Found At\n";
            foreach (var result in FilteredResults)
            {
                csv += $"{result.Seed},{result.Score},{result.NaturalNegativeJokers}," +
                      $"{result.DesiredNegativeJokers},{result.FoundAt:yyyy-MM-dd HH:mm:ss}\n";
            }
            
            await JS.InvokeVoidAsync("downloadFile", 
                $"{ConfigName}_results_{DateTime.Now:yyyyMMdd_HHmmss}.csv", 
                csv);
                
            Snackbar.Add("Results exported!", Severity.Success);
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Export failed: {ex.Message}", Severity.Error);
        }
    }

    private Color GetScoreColor(int score) => score switch
    {
        >= 5 => Color.Success,
        >= 3 => Color.Warning,
        _ => Color.Info
    };

    private string GetExpectedDatabasePath()
    {
        var baseName = ConfigName.Replace(".ouija.json", "").Replace(".json", "");
        return $"ouija_databases/{baseName}.ouija.duckdb";
    }
}

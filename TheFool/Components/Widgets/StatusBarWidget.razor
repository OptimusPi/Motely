@using System.Timers

<MudPaper Class="status-bar" Elevation="4" Square="true">
    <MudGrid AlignItems="Center" Spacing="1">
        <MudItem xs="12" sm="3">
            <MudStack Row="true" AlignItems="AlignItems.Center" Spacing="1">
                <MudIcon Icon="@Icons.Material.Filled.Info" Size="Size.Small" />
                <MudText Typo="Typo.caption">@ConnectionStatus</MudText>
            </MudStack>
        </MudItem>
        
        @if (IsSearching)
        {
            <MudItem xs="12" sm="3">
                <MudProgressLinear Value="@ProgressPercent" 
                                  Color="Color.Primary" 
                                  Size="Size.Small"
                                  Class="mt-1 mb-1">
                    <MudText Typo="Typo.caption">@PercentCompleteMetric</MudText>
                </MudProgressLinear>
            </MudItem>
            
            <MudItem xs="12" sm="3">
                <MudStack Row="true" AlignItems="AlignItems.Center" Spacing="1">
                    <MudIcon Icon="@Icons.Material.Filled.Timer" Size="Size.Small" />
                    <MudText Typo="Typo.caption">@TimeRemainingDisplay</MudText>
                </MudStack>
            </MudItem>
            
            <MudItem xs="12" sm="3">
                <MudStack Row="true" AlignItems="AlignItems.Center" Spacing="1">
                    <MudIcon Icon="@Icons.Material.Filled.Speed" Size="Size.Small" />
                    <MudText Typo="Typo.caption">@SeedsPerSecondDisplay</MudText>
                </MudStack>
            </MudItem>
        }
        else
        {
            <MudItem xs="12" sm="9">
                <MudText Typo="Typo.caption" Align="Align.Center">
                    @StatusMessage
                </MudText>
            </MudItem>
        }
    </MudGrid>
</MudPaper>

<style>
    .status-bar {
        position: fixed;
        bottom: 0;
        left: 0;
        right: 0;
        padding: 8px 16px;
        background-color: var(--mud-palette-surface);
        border-top: 1px solid var(--mud-palette-divider);
        z-index: 1300;
    }
    
    /* Add padding to main content to account for status bar */
    :global(.mud-main-content) {
        padding-bottom: 60px !important;
    }
</style>

@code {
    [Parameter] public string ConnectionStatus { get; set; } = "Ready";
    [Parameter] public bool IsSearching { get; set; }
    [Parameter] public string StatusMessage { get; set; } = "TheFool v0.4.0 - Ready to search";
    
    // Metrics from search process
    public string PercentCompleteMetric { get; set; } = "0.00%";
    public string TimeRemainingMetric { get; set; } = "0:00:00";
    public string SeedsPerMillisecondMetric { get; set; } = "0";

    private double ProgressPercent => double.TryParse(PercentCompleteMetric.TrimEnd('%'), out var percent) ? percent : 0;
    private string TimeRemainingDisplay => string.IsNullOrEmpty(TimeRemainingMetric) ? "Calculating..." : $"~{TimeRemainingMetric} remaining";
    private string SeedsPerSecondDisplay => $"{ConvertToSeedsPerSecond()} seeds/s";

    public void UpdateSearchMetrics(string percentComplete, string timeRemaining, string seedsPerMs)
    {
        PercentCompleteMetric = percentComplete;
        TimeRemainingMetric = timeRemaining;
        SeedsPerMillisecondMetric = seedsPerMs;
        InvokeAsync(StateHasChanged);
    }

    public void UpdateStatus(string message)
    {
        StatusMessage = message;
        InvokeAsync(StateHasChanged);
    }

    public void SetSearching(bool searching)
    {
        IsSearching = searching;
        if (!searching)
        {
            // Reset metrics
            PercentCompleteMetric = "0.00%";
            TimeRemainingMetric = "0:00:00";
            SeedsPerMillisecondMetric = "0";
        }
        InvokeAsync(StateHasChanged);
    }

    private string ConvertToSeedsPerSecond()
    {
        if (int.TryParse(SeedsPerMillisecondMetric, out var seedsPerMs))
        {
            var seedsPerSecond = seedsPerMs * 1000;
            return seedsPerSecond > 1000000 
                ? $"{seedsPerSecond / 1000000.0:F1}M" 
                : seedsPerSecond > 1000 
                    ? $"{seedsPerSecond / 1000.0:F1}K" 
                    : seedsPerSecond.ToString();
        }
        return "0";
    }
}

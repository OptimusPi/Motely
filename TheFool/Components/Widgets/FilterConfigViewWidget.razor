@using TheFool.Models

<MudPaper Class="pa-4" Elevation="3">
    <MudStack Spacing="3">
        <!-- Header -->
        <MudStack Row="true" AlignItems="AlignItems.Center" Justify="Justify.SpaceBetween">
            <MudText Typo="Typo.h6" Color="Color.Primary">
                📋 Configuration Overview
            </MudText>
            
            @if (ShowLaunchButton)
            {
                <MudButton Color="Color.Success" 
                          Variant="Variant.Filled" 
                          Size="Size.Large"
                          StartIcon="@Icons.Material.Filled.Search"
                          OnClick="LaunchSearch"
                          Class="launch-button">
                    🔥 LAUNCH SEARCH 🔥
                </MudButton>
            }
        </MudStack>
        
        <!-- Basic Info -->
        <MudCard Elevation="1">
            <MudCardContent Class="pb-2">
                <MudText Typo="Typo.subtitle1" Class="mb-2">
                    <MudIcon Icon="@Icons.Material.Filled.Info" Size="Size.Small" Class="mr-1" />
                    Basic Information
                </MudText>
                
                <MudSimpleTable Dense="true" Hover="true">
                    <tbody>
                        <tr>
                            <td><strong>Name:</strong></td>
                            <td>@Config.Name</td>
                        </tr>
                        <tr>
                            <td><strong>Author:</strong></td>
                            <td>@Config.Author</td>
                        </tr>
                        <tr>
                            <td><strong>Description:</strong></td>
                            <td>@Config.Description</td>
                        </tr>
                        <tr>
                            <td><strong>Keywords:</strong></td>
                            <td>
                                @if (Config.Keywords?.Any() == true)
                                {
                                    <MudStack Row="true" Spacing="1">
                                        @foreach (var keyword in Config.Keywords)
                                        {
                                            <MudChip T="string" Size="Size.Small" Color="Color.Info">@keyword</MudChip>
                                        }
                                    </MudStack>
                                }
                                else
                                {
                                    <MudText Typo="Typo.caption" Color="Color.Tertiary">None</MudText>
                                }
                            </td>
                        </tr>
                    </tbody>
                </MudSimpleTable>
            </MudCardContent>
        </MudCard>
        
        <!-- Game Settings -->
        <MudCard Elevation="1">
            <MudCardContent Class="pb-2">
                <MudText Typo="Typo.subtitle1" Class="mb-2">
                    <MudIcon Icon="@Icons.Material.Filled.Casino" Size="Size.Small" Class="mr-1" />
                    Game Settings
                </MudText>
                
                <MudSimpleTable Dense="true" Hover="true">
                    <tbody>
                        <tr>
                            <td><strong>Deck:</strong></td>
                            <td>
                                <MudChip T="string" Color="Color.Primary" Size="Size.Small">
                                    @FormatDeckName(Config.Settings.Deck)
                                </MudChip>
                            </td>
                        </tr>
                        <tr>
                            <td><strong>Stake:</strong></td>
                            <td>
                                <MudChip T="string" Color="Color.Secondary" Size="Size.Small">
                                    @FormatStakeName(Config.Settings.Stake)
                                </MudChip>
                            </td>
                        </tr>
                        <tr>
                            <td><strong>Search Range:</strong></td>
                            <td>Ante @Config.Settings.MinSearchAnte - @Config.Settings.MaxSearchAnte</td>
                        </tr>
                    </tbody>
                </MudSimpleTable>
            </MudCardContent>
        </MudCard>
        
        <!-- Scoring Options -->
        <MudCard Elevation="1">
            <MudCardContent Class="pb-2">
                <MudText Typo="Typo.subtitle1" Class="mb-2">
                    <MudIcon Icon="@Icons.Material.Filled.Score" Size="Size.Small" Class="mr-1" />
                    Scoring Options
                </MudText>
                
                <MudStack Row="true" Spacing="2">
                    <MudChip T="string" Color="@(Config.Settings.ScoreNaturalNegatives ? Color.Success : Color.Default)" 
                            Size="Size.Small"
                            Icon="@(Config.Settings.ScoreNaturalNegatives ? Icons.Material.Filled.Check : Icons.Material.Filled.Close)">
                        Natural Negatives
                    </MudChip>
                    
                    <MudChip T="string" Color="@(Config.Settings.ScoreDesiredNegatives ? Color.Info : Color.Default)" 
                            Size="Size.Small"
                            Icon="@(Config.Settings.ScoreDesiredNegatives ? Icons.Material.Filled.Check : Icons.Material.Filled.Close)">
                        Desired Negatives
                    </MudChip>
                </MudStack>
            </MudCardContent>
        </MudCard>
        
        <!-- Conditions Summary -->
        <MudCard Elevation="1">
            <MudCardContent Class="pb-2">
                <MudText Typo="Typo.subtitle1" Class="mb-2">
                    <MudIcon Icon="@Icons.Material.Filled.FilterList" Size="Size.Small" Class="mr-1" />
                    Filter Conditions
                </MudText>
                
                <MudGrid>
                    <MudItem xs="6">
                        <MudStack Row="true" AlignItems="AlignItems.Center" Spacing="1">
                            <MudIcon Icon="@Icons.Material.Filled.PriorityHigh" Color="Color.Error" Size="Size.Small" />
                            <MudText Typo="Typo.body2">
                                <strong>Needs:</strong> @Config.Settings.Needs.Count
                            </MudText>
                        </MudStack>
                    </MudItem>
                    
                    <MudItem xs="6">
                        <MudStack Row="true" AlignItems="AlignItems.Center" Spacing="1">
                            <MudIcon Icon="@Icons.Material.Filled.FavoriteBorder" Color="Color.Info" Size="Size.Small" />
                            <MudText Typo="Typo.body2">
                                <strong>Wants:</strong> @Config.Settings.Wants.Count
                            </MudText>
                        </MudStack>
                    </MudItem>
                </MudGrid>
                
                @if (Config.Settings.Needs.Count == 0 && Config.Settings.Wants.Count == 0)
                {
                    <MudAlert Severity="Severity.Warning" Dense="true" Class="mt-2">
                        No filter conditions configured. This will search all seeds.
                    </MudAlert>
                }
            </MudCardContent>
        </MudCard>
    </MudStack>
</MudPaper>

<style>
    .launch-button {
        animation: pulse 2s infinite;
        font-weight: bold;
        text-shadow: 0 0 10px rgba(255, 255, 255, 0.5);
    }
    
    @@keyframes pulse {
        0% { transform: scale(1); }
        50% { transform: scale(1.05); }
        100% { transform: scale(1); }
    }
</style>

@code {
    [Parameter] public FilterConfig Config { get; set; }
    [Parameter] public bool ShowLaunchButton { get; set; } = false;
    [Parameter] public EventCallback OnLaunchSearch { get; set; }
    
    private async Task LaunchSearch()
    {
        await OnLaunchSearch.InvokeAsync();
    }
    
    private string FormatDeckName(string deck)
    {
        return deck switch
        {
            "RedDeck" => "🔴 Red Deck",
            "BlueDeck" => "🔵 Blue Deck",
            "YellowDeck" => "🟡 Yellow Deck",
            "GreenDeck" => "🟢 Green Deck",
            "BlackDeck" => "⚫ Black Deck",
            "MagicDeck" => "🎩 Magic Deck",
            "NebuladDeck" => "🌌 Nebula Deck",
            "GhostDeck" => "👻 Ghost Deck",
            "AbandonedDeck" => "🏚️ Abandoned Deck",
            "CheckeredDeck" => "🏁 Checkered Deck",
            "ZodiacDeck" => "♈ Zodiac Deck",
            "PaintedDeck" => "🎨 Painted Deck",
            "AnaglyphDeck" => "🕶️ Anaglyph Deck",
            "PlasmaDeck" => "⚡ Plasma Deck",
            "ErraticdDeck" => "🎲 Erratic Deck",
            "ChallengeDeck" => "🏆 Challenge Deck",
            _ => deck
        };
    }
    
    private string FormatStakeName(string stake)
    {
        return stake switch
        {
            "WhiteStake" => "⚪ White Stake",
            "RedStake" => "🔴 Red Stake",
            "GreenStake" => "🟢 Green Stake",
            "BlackStake" => "⚫ Black Stake",
            "BlueStake" => "🔵 Blue Stake",
            "PurpleStake" => "🟣 Purple Stake",
            "OrangeStake" => "🟠 Orange Stake",
            "GoldStake" => "🟡 Gold Stake",
            _ => stake
        };
    }
}